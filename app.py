# app.py
# Streamlit-–æ–±—ë—Ä—Ç–∫–∞: –≤—ã–∑—ã–≤–∞–µ—Ç —Ç–≤–æ—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω–≤–µ—Å—Ç-–º–µ–º–æ –ë–ï–ó Pivot.
import os
import io
import streamlit as st

from core_strategy import analyze_ticker  # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–≤–æ—é –ª–æ–≥–∏–∫—É –∫–∞–∫ –µ—Å—Ç—å
from memo import build_invest_memo

st.set_page_config(page_title="CapinteL-Q ‚Äî Investment Memo", layout="centered")

st.title("CapinteL-Q ‚Äî Investment Memo (–±–µ–∑ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)")
st.caption("–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: Polygon.io ‚Ä¢ –í —Ç–µ–∫—Å—Ç–µ ‚Äî —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—è (–≤—Ö–æ–¥/—Ü–µ–ª–∏/—Å—Ç–æ–ø/–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞). –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ —Ä–∞—Å—á—ë—Ç—ã —Å–∫—Ä—ã—Ç—ã.")

col1, col2 = st.columns([2,1])
with col1:
    ticker = st.text_input("–¢–∏–∫–µ—Ä", value="QQQ").strip()
with col2:
    horizon = st.selectbox("–ì–æ—Ä–∏–∑–æ–Ω—Ç", options=[("short","–¢—Ä–µ–π–¥ (1‚Äì5 –¥–Ω–µ–π)"),
                                                ("mid","–°—Ä–µ–¥–Ω–µ—Å—Ä–æ–∫ (1‚Äì4 –Ω–µ–¥–µ–ª–∏)"),
                                                ("long","–î–æ–ª–≥–æ—Å—Ä–æ–∫ (1‚Äì6 –º–µ—Å—è—Ü–µ–≤)")],
                           index=1, format_func=lambda x: x[1])[0]

if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–≤–µ—Å—Ç-–º–µ–º–æ", use_container_width=True):
    if not ticker:
        st.error("–£–∫–∞–∂–∏ —Ç–∏–∫–µ—Ä.")
        st.stop()
    try:
        # –í–ê–ñ–ù–û: analyze_ticker –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Å–ª–æ–≤–∞—Ä—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–ø–∏—Å–∞–Ω–Ω–æ–º –≤ memo.py
        decision = analyze_ticker(ticker, horizon)
        # –°—Ç—Ä–∞—Ö—É–µ–º—Å—è: –µ—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–µ—Ä–Ω—É–ª–∞ ¬´–≥–æ–ª—ã–π dict¬ª, —ç—Ç–æ –æ–∫ ‚Äî memo –æ–∂–∏–¥–∞–µ—Ç dict
        if not isinstance(decision, dict):
            st.warning("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—ã—Ç–∞—é—Å—å –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ dict‚Ä¶")
            decision = dict(decision)

        memo = build_invest_memo(ticker, horizon, decision)

        st.subheader(f"üéØ Asset: {ticker.upper()}")
        st.text(f"–ì–æ—Ä–∏–∑–æ–Ω—Ç: {dict(short='–¢—Ä–µ–π–¥ (1‚Äì5 –¥–Ω–µ–π)', mid='–°—Ä–µ–¥–Ω–µ—Å—Ä–æ–∫ (1‚Äì4 –Ω–µ–¥–µ–ª–∏)', long='–î–æ–ª–≥–æ—Å—Ä–æ–∫ (1‚Äì6 –º–µ—Å—è—Ü–µ–≤)')[horizon]}")
        st.text(f"‚Äî‚Äî‚Äî")

        st.markdown(memo["core"])
        st.markdown("### ‚úçÔ∏è –†–µ–∑—é–º–µ (human-style)")
        st.write(memo["summary"])
        st.markdown("### üéØ –û—Ä–∏–µ–Ω—Ç–∏—Ä—ã (–±–µ–∑ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏)")
        st.write(memo["levels"])
        if memo["alt"]:
            st.markdown(memo["alt"])

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞–∫ .md
        buf = io.BytesIO(memo["markdown"].encode("utf-8"))
        st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å memo (.md)", data=buf, file_name=f"{ticker.upper()}_{horizon}_memo.md", mime="text/markdown")

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–º–æ: {e}")
