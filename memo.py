# memo.py
# –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏–Ω–≤–µ—Å—Ç-–º–µ–º–æ ¬´–ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏¬ª, –±–µ–∑ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–∞—Å—á—ë—Ç–æ–≤ –∏ –±–µ–∑ Pivot.

from datetime import datetime
from typing import Any, Dict, Optional, Tuple

Number = Optional[float]
Entry = Optional[Tuple[Number, Number]]

def _fmt(x: Optional[float]) -> str:
    return "‚Äî" if x is None else f"{x:,.2f}".replace(",", " ").replace("\xa0", " ")

def _stance_badge(stance: str) -> str:
    s = (stance or "").upper()
    return {"BUY": "üü¢ BUY", "SELL": "üî¥ SELL", "WAIT": "‚è≥ WAIT"}.get(s, s)

def _levels_block(dec: Dict[str, Any]) -> str:
    """–ß–∏—Ç–∞–µ–º—ã–µ —É—Ä–æ–≤–Ω–∏ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (Pivot –∏ —Ç.–ø.)."""
    entry: Entry   = dec.get("entry")
    t1: Number     = dec.get("target1")
    t2: Number     = dec.get("target2")
    stop: Number   = dec.get("stop")

    if entry is None and t1 is None and t2 is None and stop is None:
        return "‚Ä¢ –í—Ö–æ–¥: –∂–¥—ë–º –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ñ–æ—Ä–º–∞—Ü–∏–∏\n‚Ä¢ –¶–µ–ª–∏: –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n‚Ä¢ –ó–∞—â–∏—Ç–∞: –ø–æ —Ñ–∞–∫—Ç—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"

    if isinstance(entry, tuple) and len(entry) == 2:
        entry_txt = f"{_fmt(entry[0])}‚Ä¶{_fmt(entry[1])}"
    else:
        entry_txt = _fmt(entry if isinstance(entry, (int, float)) else None)

    lines = [
        f"‚Ä¢ –í—Ö–æ–¥: {entry_txt or '‚Äî'}",
        f"‚Ä¢ –¶–µ–ª—å 1: {_fmt(t1)}",
        f"‚Ä¢ –¶–µ–ª—å 2: {_fmt(t2)}",
        f"‚Ä¢ –ó–∞—â–∏—Ç–∞/—Å—Ç–æ–ø: {_fmt(stop)}",
    ]
    return "\n".join(lines)

def build_invest_memo(ticker: str, horizon: str, decision: Dict[str, Any]) -> Dict[str, str]:
    """
    –ù–∞ –≤—Ö–æ–¥–µ ‚Äî ticker, horizon ('short'/'mid'/'long') –∏ —Å–ª–æ–≤–∞—Ä—å decision
    –≤–∏–¥–∞: {'stance': 'BUY|SELL|WAIT', 'entry': (low, high)|None, 'target1': float|None,
           'target2': float|None, 'stop': float|None, 'meta': {'price': float, 'horizon': str}, 'alt': '...'}
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏ –¥–ª—è UI/—Å–∫–∞—á–∏–≤–∞–Ω–∏—è.
    """
    meta: Dict[str, Any] = decision.get("meta", {}) or {}
    price = meta.get("price")
    stance = (decision.get("stance") or "").upper()

    # –®–∞–ø–∫–∞
    dt = datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")
    title = f"üìÑ CapinteL-Q ‚Ä¢ Investment Memo\n–î–∞—Ç–∞: {dt}\n–ê–∫—Ç–∏–≤: {ticker.upper()} | –ì–æ—Ä–∏–∑–æ–Ω—Ç: {horizon}\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {_fmt(price)}"

    # Core Recommendation
    core = f"### üß† Core Recommendation: {_stance_badge(stance)}"

    # Human-style —Ä–µ–∑—é–º–µ (–±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è Pivot)
    if stance == "BUY":
        summary = (
            "–°—Ü–µ–Ω–∞—Ä–∏–π: **–ø–æ–∫—É–ø–∫–∞** –æ—Ç –æ–ø–æ—Ä–Ω–æ–π –∑–æ–Ω—ã/–ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–ø—Ä–æ—Å–∞. "
            "–†–∞–±–æ—Ç–∞–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ: —Ñ–∏–∫—Å–∏—Ä—É–µ–º —á–∞—Å—Ç—å –Ω–∞ –ø–µ—Ä–≤–æ–π —Ü–µ–ª–∏, –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Å—Ç–æ–ø –∑–∞ –∑–æ–Ω—É."
        )
    elif stance == "SELL":
        summary = (
            "–°—Ü–µ–Ω–∞—Ä–∏–π: **–ø—Ä–æ–¥–∞–∂–∞** –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞/–≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö –æ—Ç–∫–∞–∑–∞. "
            "–¶–µ–ª–∏ —Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ; –∑–∞—â–∏—â–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤—ã—à–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞."
        )
    else:
        summary = (
            "–°–µ–π—á–∞—Å –≤—ã–≥–æ–¥–Ω–µ–µ **–ø–æ–¥–æ–∂–¥–∞—Ç—å**. –ñ–¥—ë–º –ª–∏–±–æ –æ—Ç–∫–∞—Ç–∞ –∫ —É–¥–æ–±–Ω–æ–π –∑–æ–Ω–µ –¥–ª—è –≤—Ö–æ–¥–∞, "
            "–ª–∏–±–æ —è–≤–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞/–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        )

    # –£—Ä–æ–≤–Ω–∏ (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∏—Ö –ø—Ä–∏—Ä–æ–¥—ã)
    levels = _levels_block(decision)

    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∞—Ç–∫–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ decision['alt'])
    alt_txt = decision.get("alt")
    alt_block = f"**–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞:** {alt_txt}" if alt_txt else ""

    # –°–±–æ—Ä–∫–∞ Markdown
    md = "\n\n".join([
        title,
        core,
        "### ‚úçÔ∏è –†–µ–∑—é–º–µ (human-style)\n" + summary,
        "### üéØ –û—Ä–∏–µ–Ω—Ç–∏—Ä—ã (–±–µ–∑ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏)\n" + levels,
        alt_block
    ]).strip()

    # –ö–æ—Ä–æ—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–µ–≤—å—é –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    preview = "\n".join([
        f"**{ticker.upper()}** ‚Äî {_stance_badge(stance)} | –¶–µ–Ω–∞: {_fmt(price)}",
        summary,
        levels
    ])

    return {"title": title, "core": core, "summary": summary, "levels": levels, "alt": alt_block, "markdown": md, "preview": preview}
