# memo.py
from typing import Any, Dict, Optional, Tuple

# –ù–µ–±–æ–ª—å—à–∏–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –±—ã–ª –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–º
def _fmt(x: Optional[float]) -> str:
    return f"{x:.2f}" if isinstance(x, (int, float)) else "‚Äî"

def _fmt_range(lo: Optional[float], hi: Optional[float]) -> str:
    if isinstance(lo, (int, float)) and isinstance(hi, (int, float)):
        return f"{lo:.2f}‚Ä¶{hi:.2f}"
    return "‚Äî"

def _ru_horizon(h: str) -> str:
    h = (h or "").lower()
    return {"short": "–¢—Ä–µ–π–¥ (1‚Äì5 –¥–Ω–µ–π)",
            "mid": "–°—Ä–µ–¥–Ω–µ—Å—Ä–æ–∫ (1‚Äì4 –Ω–µ–¥–µ–ª–∏)",
            "long": "–î–æ–ª–≥–æ—Å—Ä–æ–∫ (1‚Äì6 –º–µ—Å—è—Ü–µ–≤)"}.get(h, h or "‚Äî")

def build_invest_memo(decision: Dict[str, Any]) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å decision –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–Ω–≤–µ—Å—Ç-–º–µ–º–æ.
    –ù–∏–∫–∞–∫–∏—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ñ–æ—Ä–º—É–ª/–ø–∏–≤–æ—Ç–æ–≤ –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º.

    –û–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–∏ –≤ decision:
      - ticker: str
      - horizon: 'short' | 'mid' | 'long'
      - stance: 'BUY' | 'SELL' | 'WAIT'
      - entry: tuple(low, high) –∏–ª–∏ None
      - target1, target2, stop: float | None
      - meta: { 'price': float, ... } (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    tkr: str = (decision.get("ticker") or "").upper()
    hz: str = _ru_horizon(decision.get("horizon", ""))
    stance: str = (decision.get("stance") or "WAIT").upper()

    meta: Dict[str, Any] = decision.get("meta") or {}
    price = meta.get("price")

    # –†–∞–∑–±–∏—Ä–∞–µ–º –≤—Ö–æ–¥/—Ü–µ–ª–∏/—Å—Ç–æ–ø –±–µ–∑–æ–ø–∞—Å–Ω–æ
    entry = decision.get("entry")
    if isinstance(entry, (list, tuple)) and len(entry) == 2:
        entry_lo, entry_hi = entry
    else:
        entry_lo, entry_hi = None, None

    tgt1 = decision.get("target1")
    tgt2 = decision.get("target2")
    stop = decision.get("stop")

    lines = []
    header = f"üìå {tkr} ‚Äî {hz}. –û—Ü–µ–Ω–∫–∞: {stance}"
    lines.append(header)

    if isinstance(price, (int, float)):
        lines.append(f"üìä –¶–µ–Ω–∞ —Å–µ–π—á–∞—Å: {_fmt(price)}")

    if stance == "WAIT":
        lines.append("‚è≥ –ë–∞–∑–∞: WAIT ‚Äî –Ω–∞ —Ç–µ–∫—É—â–∏—Ö —É—Ä–æ–≤–Ω—è—Ö –≤—Ö–æ–¥–∞ –Ω–µ—Ç, –∂–¥—ë–º –ª—É—á—à–µ–π —Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        if entry_lo or entry_hi:
            lines.append(f"üéØ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∑–æ–Ω–∞ –¥–ª—è –Ω–∞–±–æ—Ä–∞: {_fmt_range(entry_lo, entry_hi)}")
    elif stance == "BUY":
        lines.append("üü¢ –°—Ü–µ–Ω–∞—Ä–∏–π: LONG")
        if entry_lo or entry_hi:
            lines.append(f"üéØ –ó–æ–Ω–∞ –≤—Ö–æ–¥–∞: {_fmt_range(entry_lo, entry_hi)}")
        if tgt1: lines.append(f"üéØ –¶–µ–ª—å 1: {_fmt(tgt1)}")
        if tgt2: lines.append(f"üéØ –¶–µ–ª—å 2: {_fmt(tgt2)}")
        if stop: lines.append(f"üõ° –°—Ç–æ–ø: {_fmt(stop)}")
        lines.append("üß≠ –î–µ–π—Å—Ç–≤—É–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω–µ/—Å–≤–µ—á–∞–º ‚Äî –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ.")
    elif stance == "SELL":
        lines.append("üî¥ –°—Ü–µ–Ω–∞—Ä–∏–π: SHORT")
        if entry_lo or entry_hi:
            lines.append(f"üéØ –ó–æ–Ω–∞ –≤—Ö–æ–¥–∞ (—à–æ—Ä—Ç): {_fmt_range(entry_lo, entry_hi)}")
        if tgt1: lines.append(f"üéØ –¶–µ–ª—å 1: {_fmt(tgt1)}")
        if tgt2: lines.append(f"üéØ –¶–µ–ª—å 2: {_fmt(tgt2)}")
        if stop: lines.append(f"üõ° –ó–∞—â–∏—Ç–∞: {_fmt(stop)}")
        lines.append("üß≠ –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ —Å—É–µ—Ç—ã: –∂–¥—ë–º –æ—Ç–∫–∞–∑/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –æ–±—ä—ë–º ‚Äî —É–º–µ—Ä–µ–Ω–Ω—ã–π.")
    else:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –µ—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–µ–ª–æ —á—Ç–æ-—Ç–æ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
        lines.append("‚ÑπÔ∏è –°–∏–≥–Ω–∞–ª –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ñ–¥—ë–º —è—Å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ª–æ–≤–∏—è.")

    lines.append("‚ö†Ô∏è –ï—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –ª–æ–º–∞–µ—Ç—Å—è ‚Äî –±—ã—Å—Ç—Ä–æ –≤—ã—Ö–æ–¥–∏–º –∏ –∂–¥—ë–º –Ω–æ–≤—É—é —Ñ–æ—Ä–º–∞—Ü–∏—é.")
    return "\n".join(lines)
